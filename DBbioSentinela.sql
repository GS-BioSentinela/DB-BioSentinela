-- ============================================================
-- SCRIPT COMPLETO DO PROJETO BIOSENTINELA
-- ============================================================

-- ===============================
-- CRIAÇÃO DAS TABELAS
-- ===============================

CREATE TABLE T_BIOSENTINELA_USUARIO ( 
    id_usuario NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    username VARCHAR2(255) NOT NULL UNIQUE,
    password VARCHAR2(255) NOT NULL
);

CREATE TABLE T_BIOSENTINELA_REGIAO (
    id_regiao NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(255) NOT NULL,
    bioma VARCHAR2(255) NOT NULL
);

CREATE TABLE T_BIOSENTINELA_SENSOR (
    id_sensor NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    tipo VARCHAR2(100) NOT NULL,
    localizacao VARCHAR2(100) NOT NULL,
    data_instalacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_regiao NUMBER NOT NULL,
    CONSTRAINT fk_sensor_regiao_01 FOREIGN KEY (id_regiao)
        REFERENCES T_BIOSENTINELA_REGIAO (id_regiao)
);

CREATE TABLE T_BIOSENTINELA_ALERTA (
    id_alerta NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    tipo VARCHAR2(100) NOT NULL,
    mensagem VARCHAR2(500) NOT NULL,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_sensor NUMBER NOT NULL,
    CONSTRAINT fk_alerta_sensor_01 FOREIGN KEY (id_sensor)
        REFERENCES T_BIOSENTINELA_SENSOR (id_sensor)
);

-- ===============================
-- DADOS INICIAIS (INSERTS BASE)
-- ===============================

INSERT INTO T_BIOSENTINELA_USUARIO (username, password) VALUES ('admin', 'senha123');
INSERT INTO T_BIOSENTINELA_REGIAO (nome, bioma) VALUES ('Amazonas Norte', 'Floresta Amazônica');
INSERT INTO T_BIOSENTINELA_SENSOR (tipo, localizacao, id_regiao) VALUES ('Temperatura', 'Coordenada X: -3.1, Y: -60.0', 1);
INSERT INTO T_BIOSENTINELA_ALERTA (tipo, mensagem, id_sensor) VALUES ('Fumaça', 'Alta densidade de fumaça detectada', 1);

-- ===============================
-- PROCEDURES (INSERT, UPDATE, DELETE)
-- ===============================

CREATE OR REPLACE PROCEDURE PROC_INSERT_USUARIO (
    p_username IN VARCHAR2, p_password IN VARCHAR2
) AS
BEGIN
    INSERT INTO T_BIOSENTINELA_USUARIO (username, password)
    VALUES (p_username, p_password);
END;
/

CREATE OR REPLACE PROCEDURE PROC_UPDATE_USUARIO (
    p_id_usuario IN NUMBER, p_username IN VARCHAR2, p_password IN VARCHAR2
) AS
BEGIN
    UPDATE T_BIOSENTINELA_USUARIO
    SET username = p_username, password = p_password
    WHERE id_usuario = p_id_usuario;
END;
/

CREATE OR REPLACE PROCEDURE PROC_DELETE_USUARIO (
    p_id_usuario IN NUMBER
) AS
BEGIN
    DELETE FROM T_BIOSENTINELA_USUARIO
    WHERE id_usuario = p_id_usuario;
END;
/

-- ===============================
-- FUNÇÕES PERSONALIZADAS
-- ===============================

CREATE OR REPLACE FUNCTION FUN_TOTAL_ALERTAS_POR_REGIAO (
    p_id_regiao IN NUMBER
) RETURN NUMBER AS
    v_total NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_total
    FROM T_BIOSENTINELA_ALERTA A
    JOIN T_BIOSENTINELA_SENSOR S ON A.id_sensor = S.id_sensor
    WHERE S.id_regiao = p_id_regiao;
    RETURN v_total;
END;
/

CREATE OR REPLACE FUNCTION FUN_RISCO_ALERTA_SENSOR (
    p_id_sensor IN NUMBER
) RETURN VARCHAR2 AS
    v_total NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_total
    FROM T_BIOSENTINELA_ALERTA
    WHERE id_sensor = p_id_sensor;

    IF v_total >= 10 THEN
        RETURN 'ALTO';
    ELSIF v_total >= 5 THEN
        RETURN 'MÉDIO';
    ELSE
        RETURN 'BAIXO';
    END IF;
END;
/

-- ===============================
-- CURSOR E RELATÓRIO (DBMS_OUTPUT)
-- ===============================

SET SERVEROUTPUT ON;

DECLARE
    CURSOR c_sensores IS
        SELECT S.id_sensor, S.tipo, COUNT(A.id_alerta) AS total_alertas
        FROM T_BIOSENTINELA_SENSOR S
        LEFT JOIN T_BIOSENTINELA_ALERTA A ON S.id_sensor = A.id_sensor
        GROUP BY S.id_sensor, S.tipo;
    v_id_sensor T_BIOSENTINELA_SENSOR.id_sensor%TYPE;
    v_tipo T_BIOSENTINELA_SENSOR.tipo%TYPE;
    v_total NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('RELATÓRIO DE ALERTAS POR SENSOR');
    DBMS_OUTPUT.PUT_LINE('---------------------------------');
    FOR sensor IN c_sensores LOOP
        v_id_sensor := sensor.id_sensor;
        v_tipo := sensor.tipo;
        v_total := sensor.total_alertas;
        DBMS_OUTPUT.PUT_LINE('Sensor ID: ' || v_id_sensor || ' | Tipo: ' || v_tipo || ' | Total de Alertas: ' || v_total);
    END LOOP;
END;
/

-- ===============================
-- BLOCO ANÔNIMO COM LÓGICA IF/ELSE
-- ===============================

DECLARE
    v_id_sensor NUMBER := 1;
    v_risco VARCHAR2(10);
BEGIN
    v_risco := FUN_RISCO_ALERTA_SENSOR(v_id_sensor);
    IF v_risco = 'ALTO' THEN
        DBMS_OUTPUT.PUT_LINE('?? Risco ALTO detectado no sensor ' || v_id_sensor);
    ELSIF v_risco = 'MÉDIO' THEN
        DBMS_OUTPUT.PUT_LINE('?? Risco MÉDIO no sensor ' || v_id_sensor);
    ELSE
        DBMS_OUTPUT.PUT_LINE('? Risco BAIXO ou normal no sensor ' || v_id_sensor);
    END IF;
END;
/

-- ===============================
-- CONSULTAS RELACIONAIS COMPLEXAS
-- ===============================

-- Total de alertas por tipo
SELECT tipo, COUNT(*) AS total
FROM T_BIOSENTINELA_ALERTA
GROUP BY tipo
ORDER BY total DESC;

-- Regiões com mais de 1 alerta
SELECT R.nome, COUNT(A.id_alerta) AS total_alertas
FROM T_BIOSENTINELA_REGIAO R
JOIN T_BIOSENTINELA_SENSOR S ON R.id_regiao = S.id_regiao
JOIN T_BIOSENTINELA_ALERTA A ON S.id_sensor = A.id_sensor
GROUP BY R.nome
HAVING COUNT(A.id_alerta) > 1;

-- Sensores que não possuem alertas
SELECT S.id_sensor, S.tipo
FROM T_BIOSENTINELA_SENSOR S
LEFT JOIN T_BIOSENTINELA_ALERTA A ON S.id_sensor = A.id_sensor
WHERE A.id_alerta IS NULL;

-- ===============================
-- VISUALIZAÇÃO DE DADOS DAS TABELAS
-- ===============================

SELECT * FROM T_BIOSENTINELA_USUARIO;
SELECT * FROM T_BIOSENTINELA_REGIAO;
SELECT * FROM T_BIOSENTINELA_SENSOR;
SELECT * FROM T_BIOSENTINELA_ALERTA;

-- ===============================
-- TESTES FINAIS PARA O PROFESSOR
-- ===============================

-- Inserir novo usuário
EXEC PROC_INSERT_USUARIO('testeuser', '1234');

-- Atualizar usuário
EXEC PROC_UPDATE_USUARIO(2, 'usuarioAtualizado', 'novaSenha');

-- Deletar usuário
EXEC PROC_DELETE_USUARIO(2);

-- Verificar resultado
SELECT * FROM T_BIOSENTINELA_USUARIO;

-- Função: Risco do sensor 1
SELECT FUN_RISCO_ALERTA_SENSOR(1) AS RISCO_SENSOR_1 FROM DUAL;

-- Função: Total de alertas na região 1
SELECT FUN_TOTAL_ALERTAS_POR_REGIAO(1) AS TOTAL_ALERTAS_REGIAO_1 FROM DUAL;

-- Cursor com relatório de sensores
-- (Já impresso no bloco com DBMS_OUTPUT)

-- Bloco IF/ELSE para risco (já incluso)

-- ===============================
-- FIM DO SCRIPT
-- ===============================
